<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on home</title>
    <link>/post/</link>
    <description>Recent content in Posts on home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Apr 2021 18:33:40 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS with Terraform tutorial 06</title>
      <link>/post/2021/04/05/aws-with-terraform-tutorial-06/</link>
      <pubDate>Mon, 05 Apr 2021 18:33:40 +0000</pubDate>
      
      <guid>/post/2021/04/05/aws-with-terraform-tutorial-06/</guid>
      <description>Purpose This tutorial takes up the previous one aws-with-terraform-tutorial-05 by leveraging the high availability feature provided by AWS. Imagine that your bastion or your webserver are crashing for any reasons, they will be automatically recreated using autoscaling group, hence your service will experience a short downtime.
For keeping the same EIP (Elastic IP) when a new instance will replace the old one, this instance requires to perform an aws command that associates the EIP with itself.</description>
    </item>
    
    <item>
      <title>AWS with Terraform tutorial 05</title>
      <link>/post/2021/03/27/aws-with-terraform-tutorial-05/</link>
      <pubDate>Sat, 27 Mar 2021 20:01:59 +0000</pubDate>
      
      <guid>/post/2021/03/27/aws-with-terraform-tutorial-05/</guid>
      <description>Purpose This tutorial takes up the previous one aws-with-terraform-tutorial-04 by adding a bastion server which is the only one that is allowed to connect to the database and the webserver via SSH for improving the security of your infrastructure.
Here are the components you will build:
 Creating a VPC with 3 public subnets and a private subnet Creating a bastion server in a public subnet which is the only server that can be reachable from the Internet via SSH, and it is the only that is allowed to connect to the database and the webserver via SSH Creating a web server in a public subnet Creating a database server using Redis which stores the count of requests Creating a NAT gateway with an Elastic IP (EIP) in a public subnet so that the database which is in the private subnet is able to reach Internet  Notice: For the exercise I do not use &amp;ldquo;Elastic Cache&amp;rdquo; service provided by AWS, instead I use an EC2 instance and I install Redis manually.</description>
    </item>
    
    <item>
      <title>AWS with Terraform tutorial 04</title>
      <link>/post/2021/03/16/aws-with-terraform-tutorial-04/</link>
      <pubDate>Tue, 16 Mar 2021 20:24:25 +0000</pubDate>
      
      <guid>/post/2021/03/16/aws-with-terraform-tutorial-04/</guid>
      <description>Purpose I will show you how to build a scenario more complex than the previous one using a public and a private subnet in the same VPC. The scenario takes up this tutorial Scenario 2: VPC with Public and Private Subnets (NAT), here are the components you will build:
 Creating a VPC with a public and a private subnet Creating a webserver in the public subnet Creating a database server using Redis which stores the count of requests, only the webserver is allowed to connect to the database server using firewall rules called &amp;ldquo;Security Group&amp;rdquo; Creating a NAT gateway with an Elastic IP (EIP) located in the public subnet so that the database which is in the private subnet can reach Internet  Notice: For this exercise I do not use &amp;ldquo;Elastic Cache&amp;rdquo; service provided by AWS, instead I use an EC2 instance where I install Redis.</description>
    </item>
    
    <item>
      <title>AWS with Terraform tutorial 03</title>
      <link>/post/2021/03/06/aws-with-terraform-tutorial-03/</link>
      <pubDate>Sat, 06 Mar 2021 19:34:35 +0000</pubDate>
      
      <guid>/post/2021/03/06/aws-with-terraform-tutorial-03/</guid>
      <description>Purpose I will introduce you a way to split your infrastructure in distinct environment by leveraging Terraform modules.
In this tutorial I use the same AWS account to handle multiple environments in order to simplify the exercise, but in the real life you must use a AWS account for each environment for increasing isolation.
I take up the previous tutorial by adding some improvements:
 Splitting our infrastructure by environment: Dev and Staging Using user-data for automating Nginx installation Allowing only my IP own address to connect via SSH within the webserver  Here is an overview of the infrastructure you will build in this tutorial:</description>
    </item>
    
    <item>
      <title>AWS with Terraform tutorial 02</title>
      <link>/post/2021/03/04/aws-with-terraform-tutorial-02/</link>
      <pubDate>Thu, 04 Mar 2021 19:42:41 +0000</pubDate>
      
      <guid>/post/2021/03/04/aws-with-terraform-tutorial-02/</guid>
      <description>Purpose This tutorial takes up the previous one in improving our code by using the modules. A module in Terraform acts like a funtion in a programming language, and like a function we can provide some parameters.
It is a good practice to work with, and you know the famous adage in computer science? &amp;ldquo;Don&amp;rsquo;t repeat yourself!&amp;rdquo;.
The source code is available on my Github repository.
Create modules in Terraform Here is the new layout of our Terraform files located in our file system:</description>
    </item>
    
    <item>
      <title>AWS with Terraform tutorial 01</title>
      <link>/post/2021/02/20/aws-with-terraform-tutorial-01/</link>
      <pubDate>Sat, 20 Feb 2021 15:11:25 +0000</pubDate>
      
      <guid>/post/2021/02/20/aws-with-terraform-tutorial-01/</guid>
      <description>Purpose I will show you how to build a simple AWS example using Terraform for your first steps.
The example that I have chosen is the Getting Started with IPv6 for Amazon VPC, you will able to create a EC2 instance in AWS which we will spin up a web service.
You will learn how to create:
 A S3 bucket A VPC A public subnet A EC2 using an Amazon Linux image A Internet Gateway A Elastic IP A route table Some security groups to define firewall rules A SSH key for connecting to the EC2  The following figure shows you an overview of what you will build:</description>
    </item>
    
  </channel>
</rss>