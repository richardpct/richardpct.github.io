<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on home</title>
    <link>/</link>
    <description>Recent content in Home on home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Mar 2021 19:34:35 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS with Terraform tutorial 03</title>
      <link>/post/2021/03/06/aws-with-terraform-tutorial-03/</link>
      <pubDate>Sat, 06 Mar 2021 19:34:35 +0000</pubDate>
      
      <guid>/post/2021/03/06/aws-with-terraform-tutorial-03/</guid>
      <description>Purpose I will introduce you a way to split your infrastructure in distinct environment by leveraging Terraform modules.
In this tutorial I use the same AWS account to handle multiple environments in order to simplify the exercise, but in the real life you must use a AWS account for each environment for increasing isolation.
I take up the previous tutorial by adding some improvements:
 Splitting our infrastructure by environment: Dev and Staging Using user-data for automating Nginx installation Allowing only my IP own address to connect via SSH within the webserver  Here is an overview of the infrastructure you will build in this tutorial:</description>
    </item>
    
    <item>
      <title>AWS with Terraform tutorial 02</title>
      <link>/post/2021/03/04/aws-with-terraform-tutorial-02/</link>
      <pubDate>Thu, 04 Mar 2021 19:42:41 +0000</pubDate>
      
      <guid>/post/2021/03/04/aws-with-terraform-tutorial-02/</guid>
      <description>Purpose This tutorial takes up the previous one in improving our code by using the modules. A module in Terraform acts like a funtion in a programming language, and like a function we can provide some parameters.
It is a good practice to work with, and you know the famous adage in computer science? &amp;ldquo;Don&amp;rsquo;t repeat yourself!&amp;rdquo;.
The source code is available on my Github repository.
Create modules in Terraform Here is the new layout of our Terraform files located in our file system:</description>
    </item>
    
    <item>
      <title>AWS with Terraform tutorial 01</title>
      <link>/post/2021/02/20/aws-with-terraform-tutorial-01/</link>
      <pubDate>Sat, 20 Feb 2021 15:11:25 +0000</pubDate>
      
      <guid>/post/2021/02/20/aws-with-terraform-tutorial-01/</guid>
      <description>Purpose I will show you how to build a simple AWS example using Terraform for your first steps.
The example that I have chosen is the Getting Started with IPv6 for Amazon VPC, you will able to create a EC2 instance in AWS which we will spin up a web service.
You will learn how to create:
 A S3 bucket A VPC A public subnet A EC2 using an Amazon Linux image A Internet Gateway A Elastic IP A route table Some security groups to define firewall rules A SSH key for connecting to the EC2  The following figure shows you an overview of what you will build:</description>
    </item>
    
  </channel>
</rss>